#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç
–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º EnterpriseDataExtractor
"""

import argparse
import json
import os
import sys
from pathlib import Path
from typing import List

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
sys.path.insert(0, str(Path(__file__).parent))

from config.settings import settings
from core.logger import get_logger
from enterprise_data_extractor import EnterpriseDataExtractor


def setup_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    directories = [Path(settings.OUTPUT_PATH), Path("logs"), Path("data")]

    for directory in directories:
        directory.mkdir(exist_ok=True)


def print_extraction_summary(result):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è"""
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø")
    print("=" * 60)

    if hasattr(result, "get_summary"):  # Batch result
        summary = result.get_summary()

        print(f"üéØ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ URL: {summary['total_urls']}")
        print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {summary['successful']} ({summary['success_rate']:.1f}%)")
        print(f"   ‚Ä¢ –ù–µ—É–¥–∞—á–Ω–æ: {summary['failed']}")
        print(f"   ‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {summary['processing_time']:.2f}s")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ URL: {summary['avg_time_per_url']:.2f}s")

        if result.export_paths:
            print(f"\nüìÅ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
            for format_type, paths in result.export_paths.items():
                if isinstance(paths, list):
                    print(f"   ‚Ä¢ {format_type}: {len(paths)} —Ñ–∞–π–ª–æ–≤")
                    for path in paths[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        print(f"     - {path}")
                    if len(paths) > 3:
                        print(f"     ... –∏ –µ—â–µ {len(paths) - 3} —Ñ–∞–π–ª–æ–≤")
                else:
                    print(f"   ‚Ä¢ {format_type}: {paths}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
        if result.failed_extractions:
            print(f"\n‚ùå –û—à–∏–±–∫–∏:")
            for failure in result.failed_extractions[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   ‚Ä¢ {failure['url']}: {failure['error']}")
            if len(result.failed_extractions) > 5:
                print(f"   ... –∏ –µ—â–µ {len(result.failed_extractions) - 5} –æ—à–∏–±–æ–∫")

    else:  # Single result
        if result["success"]:
            print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result['processing_time']:.2f}s")

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–∏
            data = result.get("data", {})
            if data:
                print(f"\nüè¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–∏:")
                print(f"   ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                print(f"   ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                print(f"   ‚Ä¢ –ê–¥—Ä–µ—Å: {data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                print(f"   ‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: {data.get('rating', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                print(
                    f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: {data.get('reviews_count', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
                )
                print(f"   ‚Ä¢ –£—Å–ª—É–≥ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {len(data.get('services', []))}")
                print(f"   ‚Ä¢ –û—Ç–∑—ã–≤–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {len(data.get('reviews', []))}")

            # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
            if result.get("export_paths"):
                print(f"\nüìÅ –§–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
                for format_type, path in result["export_paths"].items():
                    if not format_type.endswith("_error"):
                        print(f"   ‚Ä¢ {format_type.upper()}: {path}")

            # –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
            quality = result.get("data_quality", {})
            if quality:
                print(f"\nüìà –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö:")
                print(f"   ‚Ä¢ –ü–æ–ª–Ω–æ—Ç–∞: {quality.get('completeness', 0):.0%}")
                print(
                    f"   ‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {'‚úÖ' if quality.get('has_contact_info') else '‚ùå'}"
                )
                print(f"   ‚Ä¢ –£—Å–ª—É–≥–∏: {'‚úÖ' if quality.get('has_services') else '‚ùå'}")
                print(f"   ‚Ä¢ –û—Ç–∑—ã–≤—ã: {'‚úÖ' if quality.get('has_reviews') else '‚ùå'}")
                print(f"   ‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: {'‚úÖ' if quality.get('has_rating') else '‚ùå'}")
                print(
                    f"   ‚Ä¢ –°–æ—Ü. —Å–µ—Ç–∏: {'‚úÖ' if quality.get('has_social_networks') else '‚ùå'}"
                )
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {result['error']}")

    print("=" * 60)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    parser = argparse.ArgumentParser(
        description="üó∫Ô∏è  –°–∏—Å—Ç–µ–º–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
üöÄ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
  python main.py --url "https://yandex.com.ge/maps/-/CHXU6Fmb"
  
  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º URL  
  python main.py --file urls.txt --format json csv
  
  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ –∏ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
  python main.py --file urls.txt --delay 10 --workers 1
  
  # –≠–∫—Å–ø–æ—Ä—Ç –≤–æ –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã
  python main.py --url "https://yandex.com.ge/maps/-/CHXU6Fmb" --format json csv database
  
  # –í–∞–ª–∏–¥–∞—Ü–∏—è URL –±–µ–∑ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
  python main.py --validate-file urls.txt

üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞: json, csv, database
        """,
    )

    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument("--url", type=str, help="URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è")
    parser.add_argument(
        "--file", type=str, help="–§–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º URL (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)"
    )

    # –§–æ—Ä–º–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
    parser.add_argument(
        "--format",
        nargs="+",
        choices=["json", "csv", "database"],
        default=["json"],
        help="–§–æ—Ä–º–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)",
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    parser.add_argument(
        "--output", type=str, help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
    )
    parser.add_argument(
        "--delay", type=float, help="–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"
    )
    parser.add_argument(
        "--workers", type=int, default=1, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤"
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    parser.add_argument(
        "--no-services", action="store_true", help="–ù–µ –∏–∑–≤–ª–µ–∫–∞—Ç—å —É—Å–ª—É–≥–∏"
    )
    parser.add_argument("--no-reviews", action="store_true", help="–ù–µ –∏–∑–≤–ª–µ–∫–∞—Ç—å –æ—Ç–∑—ã–≤—ã")
    parser.add_argument("--max-reviews", type=int, default=10, help="–ú–∞–∫—Å–∏–º—É–º –æ—Ç–∑—ã–≤–æ–≤")

    # –£—Ç–∏–ª–∏—Ç—ã
    parser.add_argument(
        "--validate-file", type=str, help="–¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å URL –≤ —Ñ–∞–π–ª–µ"
    )
    parser.add_argument(
        "--debug", action="store_true", help="–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º"
    )
    parser.add_argument(
        "--stats", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏"
    )

    args = parser.parse_args()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–ª–∞–¥–∫–∏
    if args.debug:
        os.environ["DEBUG"] = "True"
        os.environ["LOG_LEVEL"] = "DEBUG"

    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    setup_directories()

    logger = get_logger(__name__)

    print("üó∫Ô∏è  –°–∏—Å—Ç–µ–º–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç")
    print("=" * 60)

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –≤—ã–≤–æ–¥–∞ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
    if args.output:
        settings.OUTPUT_PATH = args.output

    # –°–æ–∑–¥–∞–µ–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä
    try:
        extractor_config = {}
        extractor = EnterpriseDataExtractor(extractor_config)

        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if args.stats:
            stats = extractor.get_session_statistics()
            print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏:")
            for key, value in stats.items():
                if key != "session_start":
                    print(f"   ‚Ä¢ {key}: {value}")
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
        if args.validate_file:
            if not Path(args.validate_file).exists():
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.validate_file}")
                sys.exit(1)

            with open(args.validate_file, "r", encoding="utf-8") as f:
                urls = [
                    line.strip()
                    for line in f
                    if line.strip() and not line.startswith("#")
                ]

            print(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è {len(urls)} URL –∏–∑ —Ñ–∞–π–ª–∞ {args.validate_file}")
            validation_result = extractor.validate_urls(urls)

            print(f"\n‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö URL: {validation_result['valid_count']}")
            print(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö URL: {validation_result['invalid_count']}")

            if validation_result["invalid"]:
                print(f"\n‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ URL:")
                for url in validation_result["invalid"][:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    print(f"   ‚Ä¢ {url}")
                if len(validation_result["invalid"]) > 10:
                    print(f"   ... –∏ –µ—â–µ {len(validation_result['invalid']) - 10}")

            return

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ URL
        if args.url:
            print(f"üéØ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑: {args.url}")

            result = extractor.extract_single(
                url=args.url,
                export_formats=args.format,
                output_dir=args.output,
                include_services=not args.no_services,
                include_reviews=not args.no_reviews,
                max_reviews=args.max_reviews,
            )

            print_extraction_summary(result)

            if not result["success"]:
                sys.exit(1)

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞
        elif args.file:
            if not Path(args.file).exists():
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.file}")
                sys.exit(1)

            # –ß–∏—Ç–∞–µ–º URL –∏–∑ —Ñ–∞–π–ª–∞
            with open(args.file, "r", encoding="utf-8") as f:
                urls = [
                    line.strip()
                    for line in f
                    if line.strip() and not line.startswith("#")
                ]

            if not urls:
                print(f"‚ùå –í —Ñ–∞–π–ª–µ {args.file} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö URL")
                sys.exit(1)

            print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(urls)} URL –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º URLs
            validation = extractor.validate_urls(urls)
            if validation["invalid_count"] > 0:
                print(f"‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {validation['invalid_count']} –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö URL")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ URLs
            if validation["valid"]:
                result = extractor.extract_batch(
                    urls=validation["valid"],
                    export_formats=args.format,
                    output_dir=args.output,
                    delay_between=args.delay,
                    max_workers=args.workers,
                )

                print_extraction_summary(result)

                # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
                print(f"\nüìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:")
                stats = extractor.get_session_statistics()
                for key, value in stats.items():
                    if key not in ["session_start", "total_processing_time"]:
                        print(f"   ‚Ä¢ {key}: {value}")
            else:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö URL –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                sys.exit(1)
        else:
            print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å --url –∏–ª–∏ --file")
            parser.print_help()
            sys.exit(1)

    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        if args.debug:
            import traceback

            traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()
